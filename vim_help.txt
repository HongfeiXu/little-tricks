使用 Ctags
使用Ctags的也很简单。 进入我们的项目代码根目录，执行以下命令：
ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .  
进入代码根目录后，打开Vim，按下Ctrl-F12快捷键自动生成tags文件。
有两组快捷键是最常用的。
Ctrl-]    跳转到光标所在符号的定义。
Ctrl-t    回到上次跳转前的位置。
更多功能通过命令man ctags或在Vim命令行下运行help ctags查询。
使用Taglist
可以通过在Vim中运行“help taglist.txt”查看taglist帮助。
在Vim命令行下运行TlistToggle命令就可以打开Taglist窗口，再次运行TlistToggle则关闭。
我们可以通过Ctrl-w快捷键或鼠标点击在Taglist窗口和编辑区之间切换焦点，
在Taglist窗口用鼠标或键盘选择某个符号，然后点击或回车，就可以跳转到该符号定义的位置。


代码折叠
参考：http://www.cnblogs.com/fakis/archive/2011/04/14/2016213.html

如果使用了indent方式，vim会自动的对大括号的中间部分进行折叠，我们可以直接使用这些现成的折叠成果。
zc      折叠
zC     对所在范围内所有嵌套的折叠点进行折叠
zo      展开折叠
zO     对所在范围内所有嵌套的折叠点展开
[z       到当前打开的折叠的开始处。
]z       到当前打开的折叠的末尾处。
zj       向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。
zk      向上移动到前一折叠的结束处。关闭的折叠也被计入。

当使用marker方式时，需要用标计来标识代码的折叠，系统默认是{{{和}}}，最好不要改动
zf      创建折叠，比如在marker方式下：                  
zf56G，创建从当前行起到56行的代码折叠；                  
10zf或10zf+或zf10↓，创建从当前行起到后10行的代码折叠。                  
10zf-或zf10↑，创建从当前行起到之前10行的代码折叠。                  
在括号处zf%，创建从当前行起到对应的匹配的括号上去（（），{}，[]，<>等）。
zd      删除 (delete) 在光标下的折叠。
仅当 'foldmethod' 设为 "manual" 或 "marker" 时有效。

zD     循环删除 (Delete) 光标下的折叠，即嵌套删除折叠。
仅当 'foldmethod' 设为 "manual" 或 "marker" 时有效。

zE      除去 (Eliminate) 窗口里“所有”的折叠。
仅当 'foldmethod' 设为 "manual" 或 "marker" 时有效。
